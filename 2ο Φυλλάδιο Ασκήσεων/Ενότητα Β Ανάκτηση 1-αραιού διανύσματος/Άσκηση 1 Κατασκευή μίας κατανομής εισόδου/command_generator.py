# ONOMA: Ανδρεόπουλος Ευστάθιος 	ΑΜ: 4630    EMAIL: cs04630@uoi.gr
# ONOMA: Ορφανίδης Παύλος 			ΑΜ: 4134    EMAIL: cs04134@uoi.gr
import numpy as np  # Εισαγωγή βιβλιοθήκης numpy για αριθμητικούς υπολογισμούς
import random  # Εισαγωγή βιβλιοθήκης random για τυχαία νούμερα


def generate_commands(n=10_000_000):
    """
    Δημιουργεί ακολουθία n εντολών που ακολουθούν συγκεκριμένες φάσεις εξέλιξης.
    
    Η μέθοδος υλοποιεί ένα σύστημα τεσσάρων φάσεων:
    - Φάση O: Αρχικοποίηση με επιλογή τυχαίας συντεταγμένης
    - Φάση A: Κανονική εξέλιξη με τρεις υποφάσεις
    - Φάση B: Επιστροφή όλων των στοιχείων στο μηδέν
    - Φάση Γ: Ξαφνική έκρηξη με 100 τυχαίες τροποποιήσεις
    
    Args:
        n (int): Ο αριθμός των εντολών που θα παραχθούν (default: 10,000,000)
    
    Returns:
        list: Λίστα tuples της μορφής (i, c) όπου i=συντεταγμένη, c=τιμή
    """
    x = np.zeros(10001)  # Δημιουργία διανύσματος 10001 στοιχείων (θέσεις 1-10000)

    commands = []  # Αρχικοποίηση λίστας για αποθήκευση εντολών
    phase = 'O'  # Ορισμός αρχικής φάσης
    s = 0  # Αρχικοποίηση ειδικής συντεταγμένης

    i = 0  # Μετρητής για τον αριθμό εντολών που έχουν δημιουργηθεί
    while i < n:  # Επανάληψη μέχρι να δημιουργηθούν n εντολές
        if phase == 'O':  # Έλεγχος αν βρισκόμαστε στη φάση αρχικοποίησης
            s = random.randint(1, 10000)  # Επιλογή τυχαίας συντεταγμένης από 1 έως 10000
            commands.append((s, 1))  # Προσθήκη εντολής για αύξηση της s κατά 1
            x[s] += 1  # Ενημέρωση του διανύσματος
            phase = 'A'  # Μετάβαση στη φάση κανονικής εξέλιξης
            i += 1  # Αύξηση μετρητή εντολών

        elif phase == 'A':  # Έλεγχος αν βρισκόμαστε στη φάση κανονικής εξέλιξης
            # Υποφάση A1: Μηδενισμός μη-μηδενικής συντεταγμένης (εκτός από s)
            non_zero_indices = [idx for idx in range(1, 10001) if idx != s and x[idx] != 0]  # Εύρεση μη-μηδενικών θέσεων
            if non_zero_indices and random.random() < 1 / 3:  # Έλεγχος πιθανότητας 1/3 και ύπαρξης στοιχείων
                idx = random.choice(non_zero_indices)  # Επιλογή τυχαίας μη-μηδενικής θέσης
                commands.append((idx, -int(x[idx])))  # Δημιουργία εντολής μηδενισμού
                x[idx] = 0  # Μηδενισμός της θέσης στο διάνυσμα
                i += 1  # Αύξηση μετρητή εντολών

            # Υποφάση A2: Προσθήκη τυχαίας τιμής σε συντεταγμένη διάφορη από s
            if random.random() < 1 / 3:  # Έλεγχος πιθανότητας 1/3
                idx = random.choice([j for j in range(1, 10001) if j != s])  # Επιλογή τυχαίας θέσης εκτός από s
                c = random.choice([j for j in range(-10, 11) if j != 0])  # Επιλογή τυχαίας τιμής από -10 έως 10 (εκτός 0)
                commands.append((idx, c))  # Δημιουργία εντολής προσθήκης
                x[idx] += c  # Ενημέρωση του διανύσματος
                i += 1  # Αύξηση μετρητή εντολών

            # Υποφάση A3: Τροποποίηση της ειδικής συντεταγμένης s
            if random.random() < 1 / 2:  # Έλεγχος πιθανότητας 1/2
                c = random.choice([-2, 2])  # Επιλογή τιμής -2 ή 2
                commands.append((s, c))  # Δημιουργία εντολής τροποποίησης
                x[s] += c  # Ενημέρωση του διανύσματος
                i += 1  # Αύξηση μετρητή εντολών

            # Απόφαση για την επόμενη φάση
            r = random.random()  # Δημιουργία τυχαίου αριθμού για απόφαση φάσης
            if r < 0.95:  # 95% πιθανότητα
                phase = 'A'  # Παραμονή στη φάση A
            elif r < 0.99:  # 4% πιθανότητα (0.95-0.99)
                phase = 'B'  # Μετάβαση στη φάση επιστροφής
            else:  # 1% πιθανότητα (0.99-1.00)
                phase = 'Γ'  # Μετάβαση στη φάση έκρηξης

        elif phase == 'B':  # Έλεγχος αν βρισκόμαστε στη φάση επιστροφής
            non_zero_indices = [idx for idx in range(1, 10001) if x[idx] != 0]  # Εύρεση όλων των μη-μηδενικών θέσεων
            if non_zero_indices:  # Έλεγχος αν υπάρχουν μη-μηδενικά στοιχεία
                idx = random.choice(non_zero_indices)  # Επιλογή τυχαίας μη-μηδενικής θέσης
                commands.append((idx, -int(x[idx])))  # Δημιουργία εντολής μηδενισμού
                x[idx] = 0  # Μηδενισμός της θέσης
                i += 1  # Αύξηση μετρητή εντολών
            else:  # Όλα τα στοιχεία είναι μηδέν
                phase = 'O'  # Επιστροφή στη φάση αρχικοποίησης

        elif phase == 'Γ':  # Έλεγχος αν βρισκόμαστε στη φάση έκρηξης
            count_explosion = 0  # Μετρητής για τις εντολές έκρηξης
            while count_explosion < 100 and i < n:  # Επανάληψη για 100 εντολές ή μέχρι το όριο n
                idx = random.choice([j for j in range(1, 10001) if j != s])  # Επιλογή τυχαίας θέσης εκτός από s
                c = random.choice([j for j in range(-10, 11) if j != 0])  # Επιλογή τυχαίας τιμής από -10 έως 10 (εκτός 0)
                commands.append((idx, c))  # Δημιουργία εντολής τροποποίησης
                x[idx] += c  # Ενημέρωση του διανύσματος
                count_explosion += 1  # Αύξηση μετρητή έκρηξης
                i += 1  # Αύξηση μετρητή εντολών
            phase = 'A'  # Μετάβαση στη φάση κανονικής εξέλιξης μετά την έκρηξη

    return commands[:n]  # Επιστροφή ακριβώς n εντολών


def save_commands_to_file(commands, filename="commands.txt"):
    """
    Αποθηκεύει μια λίστα εντολών σε αρχείο κειμένου.
    
    Κάθε εντολή αποθηκεύεται σε ξεχωριστή γραμμή με τη μορφή "i c"
    όπου i είναι η συντεταγμένη και c είναι η τιμή.
    
    Args:
        commands (list): Λίστα με tuples της μορφής (i, c)
        filename (str): Το όνομα του αρχείου εξόδου (default: "commands.txt")
    """
    with open(filename, "w") as f:  # Άνοιγμα αρχείου για εγγραφή
        for i, c in commands:  # Επανάληψη για κάθε εντολή
            f.write(f"{i} {c}\n")  # Εγγραφή εντολής στο αρχείο


if __name__ == "__main__":  # Έλεγχος αν το script εκτελείται απευθείας
    # Δημιουργία εντολών για επίδειξη (μικρότερος αριθμός)
    commands = generate_commands(10000)  # Παραγωγή 10000 εντολών
    save_commands_to_file(commands)  # Αποθήκευση εντολών σε αρχείο
    print(f"Παράχθηκαν {len(commands)} εντολές")  # Εκτύπωση πληροφοριακού μηνύματος
