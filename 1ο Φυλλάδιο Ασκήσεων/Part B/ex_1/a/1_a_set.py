# ONOMA: Ανδρεόπουλος Ευστάθιος 	ΑΜ: 4630    EMAIL: cs04630@uoi.gr
# ONOMA: Ορφανίδης Παύλος 			ΑΜ: 4134    EMAIL: cs04134@uoi.gr

import random
from tabulate import tabulate  # type: ignore # Χρήση βιβλιοθήκης για εκτύπωση πίνακα σε όμορφη μορφή

# --------------------------------------------------
# Συνάρτηση count_trailing_zeros(x):
# Υπολογίζει πόσα συνεχόμενα μηδενικά υπάρχουν στο τέλος
# της δυαδικής αναπαράστασης του ακέραιου x.
# Παράδειγμα: bin(12) = '1100' => έχει 2 trailing zeros.
def count_trailing_zeros(x):
    binary = bin(x)[2:]  # Μετατροπή σε δυαδική αναπαράσταση, αφαίρεση του '0b' προθέματος
    return len(binary) - len(binary.rstrip('0'))  # Υπολογισμός αριθμού διαδοχικών μηδενικών στο τέλος

# --------------------------------------------------
# Συνάρτηση κατακερματισμού (hash function).
# Στη συγκεκριμένη απλή υλοποίηση, ο hash είναι απλά το ίδιο το x.
def hash_function(x):
    return x

# --------------------------------------------------
# Κλάση DistinctCounter που υλοποιεί τον Flajolet-Martin αλγόριθμο.
# Κρατά μόνο μία μεταβλητή R, που αντιστοιχεί στο μέγιστο αριθμό trailing zeros
# που έχουν παρατηρηθεί σε hash τιμές μέχρι στιγμής.
class DistinctCounter:
    def __init__(self):
        self.R = 0  # Αρχική τιμή: κανένα μηδενικό στο τέλος

    def insert(self, x):
        h = hash_function(x)               # Εφαρμογή συνάρτησης κατακερματισμού
        r = count_trailing_zeros(h)       # Υπολογισμός trailing zeros στο h(x)
        if r > self.R:                    # Αν αυτός ο αριθμός είναι μεγαλύτερος απ’ ό,τι έχουμε δει μέχρι τώρα
            self.R = r                    # Τότε ενημερώνουμε την τιμή του R

    def query(self):
        return 2 ** self.R  # Η εκτίμηση βασίζεται στο 2^R, σύμφωνα με τη θεωρία του Flajolet-Martin

# --------------------------------------------------
# Συνάρτηση main:
# Δημιουργεί μια ροή από N ψευδοτυχαίους αριθμούς, τους περνά στον εκτιμητή,
# και κρατά παράλληλα το πραγματικό πλήθος μοναδικών στοιχείων για σύγκριση.
def main():
    N = 1_000_000  # Πλήθος στοιχείων που θα δημιουργήσουμε (ροή)
    counter = DistinctCounter()  # Αντικείμενο που υλοποιεί τον Flajolet-Martin
    true_distinct = set()        # Set για να παρακολουθούμε πόσα διαφορετικά στοιχεία έχουμε δει πραγματικά
    results = []                 # Λίστα για αποθήκευση των ενδιάμεσων αποτελεσμάτων (για εκτύπωση στο τέλος)

    # Εισάγουμε τα στοιχεία ένα προς ένα
    for i in range(1, N + 1):
        x = random.randint(0, 1_000_000)  # Δημιουργία ενός τυχαίου αριθμού στο διάστημα [0, 1.000.000]
        counter.insert(x)                # Εισαγωγή του αριθμού στον Flajolet-Martin εκτιμητή
        true_distinct.add(x)             # Εισαγωγή και στο set για την πραγματική καταμέτρηση

        # Κάθε 100.000 στοιχεία, αποθηκεύουμε το σημείο ελέγχου:
        if i % 100000 == 0:
            approx = counter.query()         # Εκτίμηση από τον Flajolet-Martin
            actual = len(true_distinct)      # Πραγματικός αριθμός μοναδικών (μέσω του set)
            results.append([i, actual, approx])  # Αποθήκευση γραμμής στον πίνακα

    # Εκτύπωση των αποτελεσμάτων σε μορφή πίνακα (με τίτλους στηλών)
    headers = ["Στοιχεία μέχρι τώρα", "Πραγματικά μοναδικά", "Εκτίμηση Flajolet-Martin"]
    print(tabulate(results, headers=headers, tablefmt="fancy_grid", numalign="right"))

# --------------------------------------------------
# Εκτελεί τη main() όταν τρέχει το αρχείο
if __name__ == "__main__":
    main()
